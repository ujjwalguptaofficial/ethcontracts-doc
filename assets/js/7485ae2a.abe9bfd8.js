"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[852],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),h=l(n),u=a,k=h["".concat(s,".").concat(u)]||h[u]||d[u]||o;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Get started",c={unversionedId:"get-started",id:"get-started",title:"Get started",description:"In this get started tutorial - we will learn how to install, setup and interact with contract api.",source:"@site/docs/get-started.md",sourceDirName:".",slug:"/get-started",permalink:"/ethcontracts-doc/docs/get-started",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/ethcontracts-doc/tree/main/docs/get-started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Installation",permalink:"/ethcontracts-doc/docs/installation"}},s={},l=[{value:"Installation",id:"installation",level:2},{value:"1. Core package",id:"1-core-package",level:3},{value:"2. Client package",id:"2-client-package",level:3},{value:"ethers",id:"ethers",level:4},{value:"web3js",id:"web3js",level:4},{value:"Setup",id:"setup",level:2},{value:"ethers",id:"ethers-1",level:3},{value:"web3js",id:"web3js-1",level:3},{value:"ERC20 balance",id:"erc20-balance",level:2},{value:"ethers.js",id:"ethersjs",level:3},{value:"web3.js",id:"web3js-2",level:3},{value:"transfer",id:"transfer",level:2},{value:"ethers.js",id:"ethersjs-1",level:3},{value:"web3.js",id:"web3js-3",level:3},{value:"Need more help ? Here are few links -",id:"need-more-help--here-are-few-links--",level:2}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"get-started"},"Get started"),(0,a.kt)("p",null,"In this get started tutorial - we will learn how to install, setup and interact with contract api. "),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"You need to install two package"),(0,a.kt)("h3",{id:"1-core-package"},"1. Core package"),(0,a.kt)("p",null,"core package contains all the contracts and core implementation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm i @ethcontracts/core\n")),(0,a.kt)("h3",{id:"2-client-package"},"2. Client package"),(0,a.kt)("p",null,"Client package is a client wrapper for ethereum libraries like ",(0,a.kt)("strong",{parentName:"p"},"ethers.js")," and ",(0,a.kt)("strong",{parentName:"p"},"web3.js"),". This allows you to use any of your favourite package."),(0,a.kt)("h4",{id:"ethers"},"ethers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm i @ethcontracts/ethers\n")),(0,a.kt)("h4",{id:"web3js"},"web3js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm i @ethcontracts/web3\n")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"You can use any ethereum library. Currently we support ethers and web3.js."),(0,a.kt)("h3",{id:"ethers-1"},"ethers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { EthersClient } from "@ethcontracts/ethers";\n')),(0,a.kt)("h3",{id:"web3js-1"},"web3js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { Web3Client } from "@ethcontracts/web3";\n')),(0,a.kt)("h2",{id:"erc20-balance"},"ERC20 balance"),(0,a.kt)("p",null,"Let's see how we can get balance of an erc20 token."),(0,a.kt)("h3",{id:"ethersjs"},"ethers.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { ERC20 } from "@ethcontracts/core";\nimport { EthersClient } from "@ethcontracts/ethers";\nimport { providers } from "ethers"\n\n// create token with token address\nconst token = new ERC20("0x8f3cf7ad23cd3cadbd9735aff958023239c6a063");\n\n// create provider\nconst provider = new providers.JsonRpcProvider(\'https://polygon-rpc.com\');\n\n// initiate token with provider\nawait token.init(\n    new EthersClient(provider)\n);\n\n// call token balance api\n\nconst balance = await token.getBalance("0xd5D3F35Bdd08950CCFE0DeAb638F8B5498297076");\nconsole.log("balance", balance);\n')),(0,a.kt)("h3",{id:"web3js-2"},"web3.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { ERC20 } from "@ethcontracts/core";\nimport { Web3Client } from "@ethcontracts/web3";\nimport Web3 from "web3";\n\n// create token with token address\nconst token = new ERC20("0x8f3cf7ad23cd3cadbd9735aff958023239c6a063");\n\n// create provider\nconst provider = new Web3.providers.HttpProvider(\'https://polygon-rpc.com\');\n\n// initiate token with provider\nawait token.init(\n    new Web3Client(provider)\n);\n\n// call token balance api\n\nconst balance = await token.getBalance("0xd5D3F35Bdd08950CCFE0DeAb638F8B5498297076");\nconsole.log("balance", balance);\n')),(0,a.kt)("h2",{id:"transfer"},"transfer"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transfer")," is standard ERC20 method which allows to transfer fund from user account to another user. "),(0,a.kt)("p",null,"It is write transaction which means it changes the state in blockchain transaction. In case of write transaction - we need transaction Hash and transaction receipt."),(0,a.kt)("h3",{id:"ethersjs-1"},"ethers.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { ERC20 } from "@ethcontracts/core";\nimport { EthersClient } from "@ethcontracts/ethers";\nimport { providers } from "ethers"\n\n// create token with token address\nconst token = new ERC20("0x8f3cf7ad23cd3cadbd9735aff958023239c6a063");\n\n// create provider - make sure its wallet provider like metamask, walletconnect etc as its needed to write tx on blockchain\nconst provider = <wallet provider>;\n\n// initiate token with provider\nawait token.init(\n    new EthersClient(provider)\n);\n\n// call transfer api\n\nconst toAddress = "0xd5D3F35Bdd08950CCFE0DeAb638F8B5498297076";\nconst [getTransactionHash, getTransactionReceipt] = token.transfer(toAddress,10000);\n\n// get transaction hash\n\nconst txHash = await getTransactionHash();\n\n// get tx receipt\nconst txReceipt = await getTransactionReceipt();\n\n')),(0,a.kt)("h3",{id:"web3js-3"},"web3.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { ERC20 } from "@ethcontracts/core";\nimport { Web3Client } from "@ethcontracts/web3";\nimport Web3 from "web3";\n\n// create token with token address\nconst token = new ERC20("0x8f3cf7ad23cd3cadbd9735aff958023239c6a063");\n\n// create provider - make sure its wallet provider like metamask, walletconnect etc as its needed to write tx on blockchain\nconst provider = <wallet provider>;\n\n// initiate token with provider\nawait token.init(\n    new Web3Client(provider)\n);\n\n// call transfer api\n\nconst toAddress = "0xd5D3F35Bdd08950CCFE0DeAb638F8B5498297076";\nconst [getTransactionHash, getTransactionReceipt] = token.transfer(toAddress,10000);\n\n// get transaction hash\n\nconst txHash = await getTransactionHash();\n\n// get tx receipt\nconst txReceipt = await getTransactionReceipt();\n')),(0,a.kt)("h2",{id:"need-more-help--here-are-few-links--"},"Need more help ? Here are few links -"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/ujjwalguptaofficial/ethcontracts/tree/main/examples/"},"Examples"))))}d.isMDXComponent=!0}}]);