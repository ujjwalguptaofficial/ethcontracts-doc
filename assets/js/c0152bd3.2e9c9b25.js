"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[82],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),l=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),d=l(n),m=a,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(y,c(c({ref:e},p),{},{components:n})):r.createElement(y,c({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8054:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},c="Transaction type",i={unversionedId:"concepts/transaction-type",id:"concepts/transaction-type",title:"Transaction type",description:"In blockchain there are two types of transaction -",source:"@site/docs/concepts/transaction-type.md",sourceDirName:"concepts",slug:"/concepts/transaction-type",permalink:"/ethcontracts-doc/docs/concepts/transaction-type",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/ethcontracts-doc/tree/main/docs/concepts/transaction-type.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Concepts",permalink:"/ethcontracts-doc/docs/category/concepts"},next:{title:"Transaction Data",permalink:"/ethcontracts-doc/docs/concepts/transaction-data"}},s={},l=[{value:"1.Read",id:"1read",level:2},{value:"2.Write",id:"2write",level:2}],p={toc:l};function u(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"transaction-type"},"Transaction type"),(0,a.kt)("p",null,"In blockchain there are two types of transaction -"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Read"),(0,a.kt)("li",{parentName:"ol"},"Write")),(0,a.kt)("h2",{id:"1read"},"1.Read"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Read")," transaction allows you to call smart contract methods which returns some data without modifying any state in blockchain. "),(0,a.kt)("p",null,"Methods like - ",(0,a.kt)("inlineCode",{parentName:"p"},"getBalance"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"getDecimals")," etc are read transaction. "),(0,a.kt)("p",null,"Calling read transaction in EthContracts.js is very simple. Let's see an example of calling ",(0,a.kt)("inlineCode",{parentName:"p"},"getBalance")," method"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { ERC20, EthersClient } from "@opweb3/ethcontracts";\n\nconst token = new ERC20(<tokenAddress>);\nawait token.init(new EthersClient(<wallet provider>));\n\nconst balance = await token.getBalance(<user address>);\n\n')),(0,a.kt)("h2",{id:"2write"},"2.Write"),(0,a.kt)("p",null,"Write transaction allows you to call smart contract methods which modify state in the blockchain."),(0,a.kt)("p",null,"In write transaction - you need to two things -"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Transaction hash"),(0,a.kt)("li",{parentName:"ul"},"Transaction receipt")),(0,a.kt)("p",null,"EthContracts write transaction returns hook(inspired by react) which allows you to get these value."),(0,a.kt)("p",null,"Let's see an example -"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { ERC20, EthersClient } from "@opweb3/ethcontracts";\n\nconst token = new ERC20(<tokenAddress>);\nawait token.init(new EthersClient(<wallet provider>));\n\nconst [getTransactionHash, getTransactionReceipt] = await token.transfer(<toAddress>, <amount>);\n\nconst txhash = await getTransactionHash();\nconst txReceipt = await getTransactionReceipt();\n')))}u.isMDXComponent=!0}}]);