"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9646],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),b=l(r),d=o,m=b["".concat(s,".").concat(d)]||b[d]||p[d]||a;return r?n.createElement(m,c(c({ref:t},u),{},{components:r})):n.createElement(m,c({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},9970:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:2,keywords:["erc721","burnable","smart contracts","ethereum","polygon"]},c="ERC721 Burnable",i={unversionedId:"contracts/erc721/erc721-burnable",id:"contracts/erc721/erc721-burnable",title:"ERC721 Burnable",description:"ERC721 Burnable is an extension of ERC721 which has some additional methods related to burn. It contains all methods of ERC721 as its extension.",source:"@site/docs/contracts/erc721/erc721-burnable.md",sourceDirName:"contracts/erc721",slug:"/contracts/erc721/erc721-burnable",permalink:"/ethcontracts-doc/docs/contracts/erc721/erc721-burnable",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/ethcontracts-doc/tree/main/docs/contracts/erc721/erc721-burnable.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,keywords:["erc721","burnable","smart contracts","ethereum","polygon"]},sidebar:"tutorialSidebar",previous:{title:"ERC721",permalink:"/ethcontracts-doc/docs/contracts/erc721/"},next:{title:"ERC1155",permalink:"/ethcontracts-doc/docs/contracts/erc1155"}},s={},l=[{value:"burn",id:"burn",level:2}],u={toc:l};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"erc721-burnable"},"ERC721 Burnable"),(0,o.kt)("p",null,"ERC721 Burnable is an extension of ERC721 which has some additional methods related to ",(0,o.kt)("strong",{parentName:"p"},"burn"),". It contains all methods of ERC721 as its extension."),(0,o.kt)("p",null,"Similar to ERC721 - you can interact with ERC721 Burnable token by creating instance of class ",(0,o.kt)("inlineCode",{parentName:"p"},"ERC721Burnable"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import { ERC721Burnable } from "@ethcontracts/core";\n\nconst token = new ERC721Burnable(<tokenAddress>);\n')),(0,o.kt)("h2",{id:"burn"},"burn"),(0,o.kt)("p",null,"burn method can be used to burn the amount of token of the caller account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const [getTransactionHash, getTransactionReceipt] = token.burn(<tokenId>);\n\nconst txhash = await getTransactionHash();\nconst txReceipt = await getTransactionReceipt();\n")))}p.isMDXComponent=!0}}]);