"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[591],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),k=a,f=u["".concat(c,".").concat(k)]||u[k]||d[k]||o;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4186:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:2},s="ERC721",i={unversionedId:"contracts/erc721",id:"contracts/erc721",title:"ERC721",description:"ERC721 is a class which contains all different methods required for standard erc721 contract.",source:"@site/docs/contracts/erc721.md",sourceDirName:"contracts",slug:"/contracts/erc721",permalink:"/ethcontracts-doc/docs/contracts/erc721",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/ethcontracts-doc/tree/main/docs/contracts/erc721.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"ERC20",permalink:"/ethcontracts-doc/docs/contracts/erc20"},next:{title:"Concepts",permalink:"/ethcontracts-doc/docs/category/concepts"}},c={},l=[{value:"init",id:"init",level:2},{value:"ethers.js",id:"ethersjs",level:3},{value:"web3.js",id:"web3js",level:3},{value:"getName",id:"getname",level:2},{value:"getSymbol",id:"getsymbol",level:2},{value:"getTokenCount",id:"gettokencount",level:2},{value:"getOwner",id:"getowner",level:2},{value:"getTokenURI",id:"gettokenuri",level:2},{value:"getApprovedAccount",id:"getapprovedaccount",level:2},{value:"isApprovedForAll",id:"isapprovedforall",level:2},{value:"isInterfaceSupported",id:"isinterfacesupported",level:2},{value:"approve",id:"approve",level:2},{value:"setApprovalForAll",id:"setapprovalforall",level:2},{value:"transferFrom",id:"transferfrom",level:2},{value:"safeTransferFrom",id:"safetransferfrom",level:2},{value:"safeTransferFromWithData",id:"safetransferfromwithdata",level:2}],p={toc:l};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"erc721"},"ERC721"),(0,a.kt)("p",null,"ERC721 is a class which contains all different methods required for standard ",(0,a.kt)("strong",{parentName:"p"},"erc721")," contract."),(0,a.kt)("p",null,"ERC721 instance can be created by passing token address in constructor. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { EthersClient, Web3Client, ERC721 } from "@opweb3/ethcontracts";\n\nconst token = new ERC721(<tokenAddress>);\n')),(0,a.kt)("h2",{id:"init"},"init"),(0,a.kt)("p",null,"initiate token with provider."),(0,a.kt)("h3",{id:"ethersjs"},"ethers.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { EthersClient, ERC721 } from "@opweb3/ethcontracts";\nawait token.init(new EthersClient(<wallet provider>));\n')),(0,a.kt)("h3",{id:"web3js"},"web3.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import { Web3Client, ERC721 } from "@opweb3/ethcontracts";\nawait token.init(new Web3Client(<wallet provider>));\n')),(0,a.kt)("p",null,"you can call init multiple times with different provider. This allows you to use the same token instance in multichain dapp."),(0,a.kt)("h2",{id:"getname"},"getName"),(0,a.kt)("p",null,"getName returns the name of the token."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const tokenName = await token.getName();\n")),(0,a.kt)("h2",{id:"getsymbol"},"getSymbol"),(0,a.kt)("p",null,"getSymbol returns the symbol of the token."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const symbol = await token.getSymbol();\n")),(0,a.kt)("h2",{id:"gettokencount"},"getTokenCount"),(0,a.kt)("p",null,"getTokenCount returns the no of token user owns."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const count =  await token.getTokenCount(<userAddress>);\n")),(0,a.kt)("h2",{id:"getowner"},"getOwner"),(0,a.kt)("p",null,"get owner of the token"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const owner = await token.getOwner(tokenId);\n")),(0,a.kt)("h2",{id:"gettokenuri"},"getTokenURI"),(0,a.kt)("p",null,"get token uri"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const tokenURI = await token.getTokenURI(tokenId);\n")),(0,a.kt)("h2",{id:"getapprovedaccount"},"getApprovedAccount"),(0,a.kt)("p",null,"get approved account for a tokenId"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const account = await token.getApprovedAccount(tokenId);\n")),(0,a.kt)("h2",{id:"isapprovedforall"},"isApprovedForAll"),(0,a.kt)("p",null,"check if spender is approved for all NFT of a user "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const isApproved = await token.isApprovedForAll(owner, operator);\n")),(0,a.kt)("h2",{id:"isinterfacesupported"},"isInterfaceSupported"),(0,a.kt)("p",null,"check if an interface is supported"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const isApproved = await token.isInterfaceSupported(interfaceId);\n")),(0,a.kt)("h2",{id:"approve"},"approve"),(0,a.kt)("p",null,"approve method approves a spender for the tokenId."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const [getTransactionHash, getTransactionReceipt] = await token.approve(<spenderAddress>, <tokenId>);\n\nconst txhash = await getTransactionHash();\nconst txReceipt = await getTransactionReceipt();\n")),(0,a.kt)("h2",{id:"setapprovalforall"},"setApprovalForAll"),(0,a.kt)("p",null,"setApprovalForAll method approves a spender for all tokens of a user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"token.setApprovalForAll(<spenderAddress>, <approved:boolean>);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const [getTransactionHash, getTransactionReceipt] = await token.setApprovalForAll(<spenderAddress>, true);\n\nconst txhash = await getTransactionHash();\nconst txReceipt = await getTransactionReceipt();\n")),(0,a.kt)("h2",{id:"transferfrom"},"transferFrom"),(0,a.kt)("p",null,"transferFrom method can be used to transfer a token to another user by a spender or owner."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const [getTransactionHash, getTransactionReceipt] = await token.transferFrom(<fromAddress>,<toAddress>, <tokenId>);\n\nconst txhash = await getTransactionHash();\nconst txReceipt = await getTransactionReceipt();\n")),(0,a.kt)("h2",{id:"safetransferfrom"},"safeTransferFrom"),(0,a.kt)("p",null,"safeTransferFrom method is similar to transferFrom except it will be used by contracts like NFT marketplace. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const [getTransactionHash, getTransactionReceipt] = await token.safeTransferFrom(<fromAddress>,<toAddress>, <tokenId>);\n\nconst txhash = await getTransactionHash();\nconst txReceipt = await getTransactionReceipt();\n")),(0,a.kt)("h2",{id:"safetransferfromwithdata"},"safeTransferFromWithData"),(0,a.kt)("p",null,"safeTransferFromWithData method is similar to safeTransferFrom with option to pass additional data as bytes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const [getTransactionHash, getTransactionReceipt] = await token.safeTransferFromWithData(<fromAddress>,<toAddress>, <tokenId>);\n\nconst txhash = await getTransactionHash();\nconst txReceipt = await getTransactionReceipt();\n")))}d.isMDXComponent=!0}}]);